# data_collection_map.yaml (Simpler Version)

# Global settings for this mapping (optional)
# default_periodic_interval_ms: 1000

# List of data points to collect and map to the DB schema
data_mappings:

  # --- PERIODIC DATA ---
  - collection_type: "periodic"
    interval_ms: 1000 # Override default if needed, or inherit from global
    description: "Core player resources, logged periodically."
    target_measurement: "round_metrics_periodic" # From database_schema.yaml
    fields_to_log:
      # DB_Field_Name: Offset_Key_Name (from offsets_V<version>.yaml)
      cash: "MAIN_CASH_OFFSET"
      coins: "MAIN_COINS_OFFSET"
      gems: "MAIN_GEMS_OFFSET"

  # --- EVENT-BASED DATA (Function Hooks) ---
  - collection_type: "event_on_function_hook"
    description: "Log start of a new round."
    hook_offset_key: "MAIN_START_NEW_ROUND_RVA" # From offsets_V<version>.yaml
    hook_type: "on_enter"
    actions:
      - action_type: "send_db_point"
        target_measurement: "round_metadata" 
        send_timestamp_as_field: "timestamp_start_round" # Instructs Frida to send current time under this key
        # Static tags/fields for this specific event:
        static_tags: {} # No static tags for this basic event
        static_fields: {} # No static fields
        # Fields to populate dynamically at hook time:
        # (The Frida script generator will need to know how to get these values,
        # e.g., some from function args, some by reading memory using other offsets)
        dynamic_fields_from_context: # DB_Field_Name: { source_type: 'arg'/'memory_read', value: arg_index/Offset_Key_Name }
          tier: { source_type: "memory_read_from_instance", offset_key: "MAIN_CURRENT_TIER_OFFSET", instance_source_arg_index: 0 } # Read from Main instance (args[0])
          # game_version is likely known by tower_hooker python side, not from hook event itself
          # round_id is generated by tower_hooker python side
